/* @@@@ File written by CANAPE_VERSION 9 0 40 @@@@ */

ASAP2_VERSION 1 60
/begin PROJECT new_database ""

  /begin MODULE CPP ""

    /begin A2ML

      block "IF_DATA" taggedunion if_data {


        "CANAPE_EXT" struct {
          int;             /* version number */
          taggedstruct {
            "LINK_MAP" struct {
              char[256];   /* segment name */
              long;        /* base address of the segment */
              uint;        /* address extension of the segment */
              uint;        /* flag: address is relative to DS */
              long;        /* offset of the segment address */
              uint;        /* datatypValid */
              uint;        /* enum datatyp */
              uint;        /* bit offset of the segment */
            };
            "DISPLAY" struct {
              long;        /* display color */
              double;      /* minimal display value (phys)*/
              double;      /* maximal display value (phys)*/
            };
            "VIRTUAL_CONVERSION" struct {
              char[256];   /* name of the conversion formula */
            };
          };
        };
        "CANAPE_MODULE" struct {
          taggedstruct {
            ("RECORD_LAYOUT_STEPSIZE" struct {
              char[256];   /* name of record layout*/
              uint;        /* stepsize for FNC_VALUES */
              uint;        /* stepsize for AXIS_PTS_X */
              uint;        /* stepsize for AXIS_PTS_Y */
              uint;        /* stepsize for AXIS_PTS_Z */
              uint;        /* stepsize for AXIS_PTS_4 */
              uint;        /* stepsize for AXIS_PTS_5 */
            })*;
          };
        };

        /*********************************************************/
        /*   CCP AML   AML Version V2.6, 18.10.2002              */
        /*********************************************************/
        "ASAP1B_CCP" taggedstruct {
            /* Description of the DAQ-Lists */
            (block "SOURCE" struct {
              struct {
                char [101];   /* Name of the DAQ-List (data acquisition list),
                                 measurement source .        */
                              /* If the DAQ-Liste only supports one fixed ECU
                                 sampling rate, it can be declared below
                                 to achieve compatibility with the ASAP2 standard.
                                 Otherwise description of the possible ECU
                                 sampling rates in QP_BLOB      */
                int;          /* Period definition : Basic scaling unit in
                                 CSE defined in ASAP1b (CSE=Code for Scaling Unit) */
                long;         /* Period definition : Rate in Scaling Units */
              };
              taggedstruct {
                "DISPLAY_IDENTIFIER" char[32];
                block "QP_BLOB" struct {
                  uint;                  /* Number of the DAQ-List 0..n               */
                  taggedstruct {
                    "LENGTH" uint;     /* Length of the DAQ-Liste, maximum number of
                                          the useable ODTs                          */
                    "CAN_ID_VARIABLE"; /* CAN-Message-ID is variable                */
                    "CAN_ID_FIXED" ulong;
                                       /* CAN-Message-ID of the DTOs is fixed,
                                          Default DTO
                                          Bit31 = 1: extended Identifier
                                          Bit31 = 0: standard Identifier            */
                                       /* Not applied if the ECU uses the DTM-Id    */
                    ("RASTER" uchar )*;
                                       /* Supported CCP Event Channel Names
                                          of this DAQ List */
                    ("EXCLUSIVE" int )*;
                                       /* Exclusion of other DAQ-Lists              */
                    "REDUCTION_ALLOWED";
                                       /* Data reduction possible                   */
                    "FIRST_PID" uchar; /* First Packet ID (PID) of the DAQ List     */
                  };
                };
              };
            } )*;
            /* Description of the available ECU Sampling Rates (Event Channels)      */
            (block "RASTER" struct {
               char [101];   /* CCP Event Channel Name                               */
               char [9];     /* Short Display Name of the Event Channel Name         */
               uchar;        /* Event Channel No., used for CCP START_STOP)          */
               int;          /* Period definition :  basic scaling unit in CSE
                                as defined in ASAP1b                                 */
               long;         /* ECU sample rate of the event channel,
                                period definition based on the basic scaling unit    */
               taggedstruct {
                 ("EXCLUSIVE" uchar )*;
                             /* Exclusion of other CCP Event Channels                */
               };
            })*;
            /* Group several event channels to form one combined event */
            /* e.g. group all cylinder synchronous events to one combined element */
            (block "EVENT_GROUP" struct {
               char [101];   /* Event group name */
               char [9];     /* Short name for the event group */
               taggedstruct {
                 ("RASTER" uchar )*;
               };
                             /* all event channels beloging to group
                                (CCP Event Channel Numbers for START_STOP)               */
            })*;
            /* Description of the authentification process */
            block "SEED_KEY" struct {
               char[256];    /* Name of the Seed&Key DLL for CAL Priviledge,
                                including file-Extension without path */
               char[256];    /* Name of the Seed&Key DLL for DAQ Priviledge,
                                including file-Extension without path */
               char[256];    /* Name of the Seed&Key DLL for PGM Priviledge,
                                including file-Extension without path */
            };
            /* Description of the checksum calculation process */
            block "CHECKSUM" struct {
               char[256];    /* Name of the Checksum DLL representing the ECU Algorithm,
                                including file-Extension without path */
            };
            block "TP_BLOB" struct {
               uint;   /* CCP Version,       High Byte: Version
                                             Low Byte : subversion (dec.)            */
               uint;   /* Blob-Version,      High Byte: Version
                                             Low Byte : subversion (dec.)            */
               ulong;  /* CAN-Message ID for 'Transmitting to ECU (CRM)'
                                             Bit31 = 1: extended Identifier
                                             Bit31 = 0: standard Identifier          */
               ulong;  /* CAN-Message ID for 'Receiving from ECU (DTM)'
                                             Bit31 = 1: extended Identifier
                                             Bit31 = 0: standard Identifier          */
               uint;   /* Logical CCP-Address of the (station address)           */
               uint;   /* Byte order of Multiple-byte-items
                                             1 = high Byte first, 2 = low byte first */
               taggedstruct {
                 block "CAN_PARAM" struct {
                   uint;                  /* Quartz freq. of the elec. control unit  */
                   uchar;                 /* BTR0                                    */
                   uchar;                 /* BTR1                                    */
                 };
                 "BAUDRATE" ulong;        /* Baud rate in Hz.                        */
                 "SAMPLE_POINT" uchar;    /* sampling point of time in percent       */
                 "SAMPLE_RATE" uchar;     /* number of samples per Bit (1 oder 3)    */
                 "BTL_CYCLES" uchar;      /* number of BTL-cycles                    */
                 "SJW" uchar;             /* SJW-parameter in BTL-cycles             */
                 "SYNC_EDGE" enum {
                    "SINGLE" = 0,         /* Synchronisation only on fallende edge   */
                    "DUAL" = 1            /* Synchr. on falling and rising edge      */
                 };
                 "DAQ_MODE" enum {        /* mode of cylcic data acquisition         */
                    "ALTERNATING" = 0,    /* ECU is sending one ODT per cycle        */
                    "BURST" = 1           /* ECU is sending a complete DAQ           */
                 };
                 "BYTES_ONLY";            /* ECU supports max. elements of one Byte size */
                                          /* otherwise ECU supports different dataTypes  */
                 "RESUME_SUPPORTED";      /* ECU supports the Resume function            */
                 "STORE_SUPPORTED";       /* ECU supports the Store function             */
                 "CONSISTENCY" enum {
                    "DAQ" = 0,            /* consistency of a complete DAQ ist guaranteed */
                    "ODT" = 1             /* consistency of a complete ODT ist guaranteed */
                 };
                 "ADDRESS_EXTENSION" enum {  /* address extension                      */
                    "DAQ" = 0,               /* ECU supports only one Address extension
                                                within an DAQ                    */
                    "ODT" = 1                /* ECU supports only one Address extension
                                                within an ODT                    */
                 };
                 block "CHECKSUM_PARAM" struct {
                   uint;               /* checksum calculation procedure
                                        standard types not yet defined,
                                        if greater of equal 1000 : manufacturer specific  */
                   ulong;               /* Maximum block length used by an ASAP1a-CCP
                                           command, for checksum calculation procedure  */
                   taggedstruct {
                     "CHECKSUM_CALCULATION" enum {
                        "ACTIVE_PAGE" = 0,
                        "BIT_OR_WITH_OPT_PAGE" = 1
                     };
                   };
                 };
                 (block "DEFINED_PAGES" struct {
                    struct {
                       uint;            /* Logical No. of the memory page (1,2,..)   */
                       char[101];       /* Name of the memory page                   */
                       uint;            /* Adress-Extension of the memory page (only
                                           Low Byte significant)                     */
                       ulong;           /* Base address of the memory page           */
                       ulong;           /* Length of the memory page in Bytes        */
                    };
                    taggedstruct {
                      "RAM";              /* memory page in RAM */
                      "ROM";              /* memory page in ROM */
                      "FLASH";            /* memory page in FLASH */
                      "EEPROM";           /* memory page in EEPROM */
                      "RAM_INIT_BY_ECU";  /* memory page is initialised by ECU start-up */
                      "RAM_INIT_BY_TOOL"; /* RAM- memory page is initialised by the MCS */
                      "AUTO_FLASH_BACK";  /* RAM memory page is automatically flashed back */
                      "FLASH_BACK";       /* feature available to flash back the RAM memory page */
                      "DEFAULT";          /* memory page is standard (fallback mode) */
                    };
                 } ) *;
                 ( "OPTIONAL_CMD"  uint )*; /* CCP-Code of the optional command available
                                               in the ECU. It is recommended to declare all
                                               non-standard ECU commands here */
               };
            };
            ("ADDR_MAPPING" struct {
              ulong;   /* from   */
              ulong;   /* to     */
              ulong;   /* length */
            })*;
            /* for CHARACTERISTIC and AXIS_PTS and MEMORY_LAYOUT */
            "DP_BLOB" struct {
               uint;   /* Address extension of the calibration data
                          (only Low Byte significant) */
               ulong;  /* Base address of the calibration data */
               ulong;  /* Number of Bytes belonging to the calibration data  */
            };
            /* for MEASUREMENT */
            "KP_BLOB" struct {
               uint;   /* Address extension of the online data
                            (only Low Byte significant) */
               ulong;  /* Base address of the online data   */
               ulong;  /* Number of Bytes belonging to the online data (1,2 or 4) */
               taggedstruct {
                  ("RASTER" uchar )*;
                         /* Array of event channel initialization values */
               };
            };
        };
        "CANAPE_GROUP" taggedstruct {
          block "STRUCTURE_LIST" (char[1024])*;
        };
      };

    /end A2ML

    /begin MOD_COMMON ""
      BYTE_ORDER MSB_LAST
      ALIGNMENT_BYTE 1
      ALIGNMENT_WORD 2
      ALIGNMENT_LONG 4
      ALIGNMENT_INT64 8
      ALIGNMENT_FLOAT32_IEEE 4
      ALIGNMENT_FLOAT64_IEEE 8
    /end MOD_COMMON

    /begin IF_DATA ASAP1B_CCP
       /begin SEED_KEY
              "seedkey1.DLL" "seedkey1.DLL" "seedkey1.DLL"
       /end SEED_KEY
       /begin TP_BLOB
              0x201 0x0206 0x0100 0x0101 0x0039 1
              BAUDRATE 250000
              SAMPLE_POINT 75
              SAMPLE_RATE 1
              BTL_CYCLES 8
              SJW 2
              SYNC_EDGE SINGLE
              DAQ_MODE BURST
              CONSISTENCY ODT
              ADDRESS_EXTENSION DAQ
              BYTES_ONLY
              /begin CHECKSUM_PARAM
                0x0000 /* Type */
                0xFFFFFFFF /* Limit */
              /end CHECKSUM_PARAM

              OPTIONAL_CMD 0x05 /* TEST */
              OPTIONAL_CMD 0x08 /* START_STOP_ALL */
              OPTIONAL_CMD 0x0F /* SHORT_UPLOAD */
              OPTIONAL_CMD 0x12 /* GET_SEED */
              OPTIONAL_CMD 0x13 /* UNLOCK */
              OPTIONAL_CMD 0x23 /* DNLOAD6 */
              OPTIONAL_CMD 0x22 /* PROGRAM_6 */
       /end TP_BLOB
    /end IF_DATA

    /begin MOD_PAR ""
    /end MOD_PAR



    /begin CHARACTERISTIC cal1 ""
      VALUE 0x2100 __UBYTE_S 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      BYTE_ORDER MSB_FIRST
      FORMAT "%.15"
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "Cal_var_1_byte" 0x2100 0x0 0 0x0 0 0x0 0x0
        DISPLAY 0 0 255
      /end IF_DATA
      SYMBOL_LINK "Cal_var_1_byte" 0
    /end CHARACTERISTIC

    /begin CHARACTERISTIC cal2 ""
      VALUE 0x2101 __ULONG_S 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      BYTE_ORDER MSB_FIRST
      FORMAT "%.15"
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "Cal_var_2_long" 0x2101 0x0 0 0x0 0 0x0 0x0
        DISPLAY 0 0 255
      /end IF_DATA
      SYMBOL_LINK "Cal_var_2_long" 0
    /end CHARACTERISTIC

    /begin CHARACTERISTIC cal3 ""
      VALUE 0x2105 __UBYTE_S 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      BYTE_ORDER MSB_FIRST
      FORMAT "%.15"
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "Cal_var_3_byte" 0x2105 0x0 0 0x0 0 0x0 0x0
        DISPLAY 0 0 255
      /end IF_DATA
      SYMBOL_LINK "Cal_var_3_byte" 0
    /end CHARACTERISTIC


    /begin RECORD_LAYOUT __UBYTE_Z 
      FNC_VALUES 1 UBYTE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UWORD_Z 
      FNC_VALUES 1 UWORD ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __ULONG_Z 
      FNC_VALUES 1 ULONG ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SBYTE_Z 
      FNC_VALUES 1 SBYTE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SWORD_Z 
      FNC_VALUES 1 SWORD ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SLONG_Z 
      FNC_VALUES 1 SLONG ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT32_IEEE_Z 
      FNC_VALUES 1 FLOAT32_IEEE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT64_IEEE_Z 
      FNC_VALUES 1 FLOAT64_IEEE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UBYTE_S 
      FNC_VALUES 1 UBYTE COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UWORD_S 
      FNC_VALUES 1 UWORD COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __ULONG_S 
      FNC_VALUES 1 ULONG COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SBYTE_S 
      FNC_VALUES 1 SBYTE COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SWORD_S 
      FNC_VALUES 1 SWORD COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SLONG_S 
      FNC_VALUES 1 SLONG COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT32_IEEE_S 
      FNC_VALUES 1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT64_IEEE_S 
      FNC_VALUES 1 FLOAT64_IEEE COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__UBYTE_S 
      AXIS_PTS_X 1 UBYTE INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__UWORD_S 
      AXIS_PTS_X 1 UWORD INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__ULONG_S 
      AXIS_PTS_X 1 ULONG INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__SBYTE_S 
      AXIS_PTS_X 1 SBYTE INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__SWORD_S 
      AXIS_PTS_X 1 SWORD INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__SLONG_S 
      AXIS_PTS_X 1 SLONG INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__FLOAT32_IEEE_S 
      AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__FLOAT64_IEEE_S 
      AXIS_PTS_X 1 FLOAT64_IEEE INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __A_UINT64_Z 
      FNC_VALUES 1 A_UINT64 ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __A_INT64_Z 
      FNC_VALUES 1 A_INT64 ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __A_UINT64_S 
      FNC_VALUES 1 A_UINT64 COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __A_INT64_S 
      FNC_VALUES 1 A_INT64 COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__A_UINT64_S 
      AXIS_PTS_X 1 A_UINT64 INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__A_INT64_S 
      AXIS_PTS_X 1 A_INT64 INDEX_INCR DIRECT
    /end RECORD_LAYOUT

  /end MODULE
/end PROJECT
